rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Chats collection
    match /chats/{chatId} {
      // Allow reading if user is in the participants array
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      // Allow creating new chats
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      // Allow updating chats if user is a participant
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;

      // Messages subcollection
      match /messages/{messageId} {
        // Check parent chat document for participant membership
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow update: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow delete: if false; // Don't allow deleting messages

        // AI Extraction subcollection - CRITICAL FOR PROACTIVE ASSISTANT
        match /aiExtraction/{extractionId} {
          // Allow authenticated users to read/write AI extractions for messages they can access
          allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
          allow write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        }
      }
    }

    // Calendar events collection (user-specific)
    match /calendarEvents/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;

      match /events/{eventId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Decisions collection (user-specific)
    match /decisions/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;

      match /userDecisions/{decisionId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Deadlines collection (user-specific)
    match /deadlines/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;

      match /userDeadlines/{deadlineId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Proactive feedback collection - NEW FOR PR9
    match /proactiveFeedback/{feedbackId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Feedback is immutable
    }

    // Proactive insights collection - NEW FOR PR9
    match /proactiveInsights/{insightId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if false; // Only Cloud Functions can write insights
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
